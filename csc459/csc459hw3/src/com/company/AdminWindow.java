package com.company;

import javax.swing.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;

/**
 * Created by keithmartin on 4/5/16.
 */
public class AdminWindow extends javax.swing.JFrame {

    /**
     * Creates new form AdminWindow
     */

    AdminTable adminTable = new AdminTable();
    ArrayList<String> recommendations = new ArrayList<>();

    String PUBLIC_DNS = "ec2-54-149-52-62.us-west-2.compute.amazonaws.com";
    Connection connection = null;
    ArrayList<String> userNames = new ArrayList<>();
    public AdminWindow() {
        initComponents();
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
            return;
        }
        try {
            int row = 1;
            connection = DriverManager.
                    getConnection("jdbc:mysql://" + PUBLIC_DNS + ":3306/keithmartinA1P2db", "kmartin5", "Colden21");
            adminTable.fillMovieName(jTable2, "SELECT name FROM movie;", connection);
            while (row <= jTable2.getModel().getRowCount()) {
                int partialCount = adminTable.getNumPartialOrFull("SELECT position FROM watched_movie WHERE position='partial' AND user_id >= 1 AND user_id <= 25 AND movie_id = " + row + ";", connection);
                int fullCount = adminTable.getNumPartialOrFull("SELECT position FROM watched_movie WHERE position='full' AND user_id >= 1 AND user_id <= 25 AND movie_id = " + row + ";", connection);
                int category = adminTable.getCategory("SELECT category_id FROM movie WHERE movie_id = " + row + ";", connection);
                String categoryName = adminTable.getCategoryName("SELECT name FROM category WHERE category_id = " + category, connection);
                row--;
                jTable2.setValueAt(partialCount, row, 1);
                jTable2.setValueAt(fullCount, row, 2);
                jTable2.setValueAt(categoryName, row, 3);
                row += 2;
            }

            userNames = adminTable.getUserNames(connection);

            DefaultListModel model = new DefaultListModel();

            for (String str : userNames) {
              model.addElement(str);
            }

            jList1.setModel(model);

        } catch (SQLException e) {
            System.out.println("Connection Failed!:\n" + e.getMessage());
        }
        //table.fillWatchedAndRatingTable(jTable2, "SELECT * from movie;", connection);
        //table.fillRatingTable(jTable1, "SELECT movie_id from watched_movie;", connection);
    }

    public void run() {
        new AdminWindow().setVisible(true);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();

        KeyListener keyListener = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                String userName = (String) jList1.getSelectedValue();

                try {
                    adminTable.fillWatchedAndRatingTable(userName, jTable1, "SELECT * from watched_movie WHERE user_id=" + adminTable.getUserId(userName, connection), connection);
                    recommendations = adminTable.queryForRecommendations("select m.name, m3.name\n" +
                            "from user u\n" +
                            "inner join preference p\n" +
                            "on u.user_id = p.user_id\n" +
                            "and u.user_id = " + adminTable.getUserId(userName, connection) + "\n" +
                            "inner join movie m\n" +
                            "on p.category_id = m.category_id\n" +
                            "inner join watched_movie wm3\n" +
                            "on wm3.user_id = u.user_id\n" +
                            "inner join movie m3\n" +
                            "on wm3.movie_id = m3.movie_id\n" +
                            "where m.movie_id not in (select wm2.movie_id\n" +
                            "                                     from watched_movie wm2\n" +
                            "                                     where wm2.user_id = u.user_id)\n" +
                            "and wm3.movie_id in (select wm2.movie_id\n" +
                            "                                     from watched_movie wm2 \n" +
                            "                                     where wm2.user_id = u.user_id) \n" +
                            "and m3.category_id = p.category_id\n" +
                            "and p.category_id in \n" +
                            "     (select m2.category_id\n" +
                            "      from movie m2\n" +
                            "      inner join watched_movie wm\n" +
                            "      on wm.movie_id = m2.movie_id\n" +
                            "      inner join rating r\n" +
                            "      on wm.movie_id = r.movie_id\n" +
                            "      where wm.position = 'Full'\n" +
                            "      and wm.user_id = u.user_id\n" +
                            "      and r.user_id = u.user_id\n" +
                            "      and r.star_rating in (5));", connection);

                    jTextArea1.setText("");
                    for (String recommend : recommendations) {
                        jTextArea1.append(recommend +"\n");
                    }

                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
        };

        KeyListener keyListenerjTable2 = new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {

            }

            @Override
            public void keyReleased(KeyEvent e) {
                int row = jTable2.getSelectedRow();
                int column = jTable2.getSelectedColumn();
                String category = (String) jTable2.getModel().getValueAt(row, column);
                int category_id = adminTable.getCategory("SELECT category_id FROM category WHERE name = " + "'" + category + "'", connection);

                try {
                    String movieName = (String) jTable2.getModel().getValueAt(row, 0);
                    connection.createStatement().executeUpdate("UPDATE movie SET category_id = " + category_id + " WHERE name = " + "'" + movieName + "'" );
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
        };

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {"test1", "test2"};

            public int getSize() {
                return strings.length;
            }

            public Object getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("Select user:");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String[]{
                        "user_id", "movie_id", "position", "rating"
                }
        ));
        jList1.addKeyListener(keyListener);
        jScrollPane2.setViewportView(jTable1);

        jLabel2.setText("User data:");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jLabel3.setText("Recommendations:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
                new Object [][] {
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null},
                        {null, null, null, null}
                },
                new String [] {
                        "Movie", "Number watched partially", "Number watched fully", "Category"
                }
        ));
        jScrollPane4.setViewportView(jTable2);

        jTable2.addKeyListener(keyListenerjTable2);

        jLabel4.setText("Statistics");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(50, 50, 50)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(200, 200, 200)
                                                .addComponent(jLabel4))
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 729, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel2))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 144, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        pack();
    }// </editor-fold>


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration
}

